{
  "events": [],
  "raw_text": "VISA Online Assessment practice sheet\nGeneral rounds:-\n1. Online coding assessment on hackerrank (4 coding questions)\n2. Technical Interview (2 rounds)\n3. HR Interview (1 round)\nCoding questions\nCODING ROUND:\n1. Maximum Score: An interviewer at HackerRank recently came up with an interesting\nproblem for the candidates. Given an array arr of n integers, start with a score of 0. In one\noperation, one element of the array is chosen, and its value is added to the score. The element\nis replaced by the integer ceiling of one-third of its value. For example, if the element is 10, then\n10 is added to the score and the element is replaced by ceil(10/3)=4. The task is to find the\nmaximum possible score after k operations.\n2. Alex is shopping at Ozone Galleria Mall. There is a dedicated cubicle for a type of product at\nthe shopping center. All the products sold at the ith cubicle are priced the same, denoted by\nprices[i]. The cubicles are arranged such that the price of the products sold at each cubicle are\nin non-decreasing order. Several queries would be asked about the problem. In each query, the\ncubicle number Alex is initially standing at, and the amount of money Alex has is given, and Alex\ncan travel in the right direction visiting from the current cubicle to the last cubicle. Alex may buy\nat most one item from any cubicle visited, but the total cost of the purchase must not exceed\nthe amount Alex has. Report the maximum number of products that can be purchased for each\nquery. More formally, given an array of n integers, prices, where prices[i] denotes the price of the\nproduct sold in the ith cubicle. The array prices are in non-decreasing order (i.e., the\nprice[i]≤price[i+1]), and q queries need to be processed. For each query, two integers are given:\npos: Alex’s initial position\namount: the amount of money Alex has\nAlex needs to visit each cubicle from number pos to n, purchasing at most one product from\neach cubicle. For each query, the goal is to find the maximum number of products that Alex can\nbuy.\n3. https://www.geeksforgeeks.org/inversion-count-in-array-using-merge-sort/\n4. https://www.hackerrank.com/challenges/filling-jars/problem\n5. https://leetcode.com/problems/longest-increasing-subsequence/\n6. https://leetcode.com/problems/sell-diminishing-valued-colored-balls/\n7. https://www.geeksforgeeks.org/compute-before-matrix/\n8. https://leetcode.com/problems/minimum-falling-path-sum/\n9. https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\nDesigned by :- CEC GEU & GEHU\n10. https://www.geeksforgeeks.org/count-triplets-with-sum-smaller-than-a-given-value/\n11. Given a string consisting of letters that indicate directions i.e. ‘L’ for left, ‘R’ for right, ‘U’\nfor, up and ‘D’ for down, find the minimum length of string that can be obtained after\ndeleting some characters of the string so that we reach the same destination as the\noriginal string.\n12. Given ‘n’ Jars filled with ‘m’ number of Jellybeans. ‘T’ represents the number of\noperations performed on these jars. Given a range [a-b] and number of jelly beans to be\nfilled in the jars lying in the range [a-b], find the number of jelly beans in each jar after\nthese ‘T’ operations\n13. Given a number ‘N’ and an array a[ ], find the number of possibilities of a[i]-a[j]=N such that\ni>j. (Could be solved in O( n ) using a HashMap)\n14. Given the number of nodes and the number of edges connecting these nodes, arrange these\nedges such that maximum number of nodes are strongly connected. Return the number of\nnodes that could be strongly connected. [Hint:- To make first node strongly connected you need\nn-1 edges for second you need n-2 and so on. i.e edges – (n-1) – (n-2) - … - (n-k) >= 0, then largest\nk possible is the answer).\n15. https://www.hackerrank.com/contests/w1/challenges/volleyball-match/ (use\ncombinatorics using dp to solve it).\n16. https://www.geeksforgeeks.org/find-the-number-of-islands-using-dfs/\n17. https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-most-\ntwice/\n18. https://www.naukri.com/code360/interview-bundle/visa\n19. https://algodaily.com/companies/visa\n20. https://workat.tech/company/visa/interview-questions/problem-solving?status=all\n21. Find if two linked list intersect.\n22. Akash had recently bought a puzzle book. Each page in the book has a word puzzle in which\na grid of letters from the English Alphabet (uppercase or lowercase) or digits between 0-9 are\ngiven. Akash has to figure out the number of occurrences of a particular word in the given grid.\nThe grid is always a square, and the word can be present in any direction in the grid i.e. left to\nright, right to left, top to bottom, bottom to top, and the diagonals. Palindromic words (words\nwhich are read the same as the original word in the opposite direction too) if present in the grid\nwill be counted twice. Write a program to help Akash. Read the input from STDIN and print the\noutput to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to\nthe standard output and test cases will fail.\nInput Format:\nThe first line of input has N, which is the number of rows/columns in the grid.\nDesigned by :- CEC GEU & GEHU\nThe next N lines each contain N-characters (alphabets or digits).\nThe last line contains the word whose number of occurrences has to be found out.\nOutput Format:\nThe output has the number of occurrences of the given word in the grid.\nConstraint:\nN >= 3.\nSample Input 1:\n3\nctt\ncat\ncct\ncat\nSample Output 1:\n4\n23. https://www.geeksforgeeks.org/maximum-length-subarray-with-difference-between-\nadjacent-elements-as-either-0-or-1/\n24. https://www.naukri.com/code360/problems/ninja-and-the-dance-competetion_1172167\n25. Imagine that you are standing at the starting point of a straight street and trying to reach the\nend of the street. This street is represented by a number line starting at 0 and ending at finish\n(finish > 0). There are electric scooters scattered along the street to help you get to the end.\nSpecifically, the scooters are represented by an array scooters, with scooters[i] representing the\nlocation of the ith scooter. Each scooter can travel upto 10 points along the number line before\nits battery is fully discharged and it cannot go further. For example, if a scooter is at point 5, it\ncan travel to points 5,6,7,8 … upto point 15 (inclusive), but it cannot get to the point q6 or\nfurther.\nTo get to the end point of the street, you must use the following algorithm:-\n1. From the current position, travel to the nearest scooter to the right on foot. If there are\nno more scooters available, travel to the end point on foot.\n2. Get on this scooter and use all of its battery/resources to travel as far as you can toward\nthe end point.\n3. If you still haven’t reached the end point, repeat this process from step 1.\nGiven that you must use the algorithm described above to travel from starting point of the street\n0 to the end point of the street finish, your task is to return the total distance that you will travel\non scooters.\nNOTE. You are not expected to provide the most optimal solution, but a solution with the time\ncomplexity not worse than O(scooters.length x finish) will fit within the execution time limit.\nExample\n1. For finish =23 and scooters = [7 ,4, 14], the output should be 19. 4->14 then 14->21 = 19\n2. For finish = 27 and scooters = [15, 7,3,10], the output should be 3->13 and 15-> 25 = 20.\n3. For finish =10 and scooters = [], the output should be 0.\nDesigned by :- CEC GEU & GEHU\nFirst line of input is an integer representing finish, next line has n representing the number of\nscooters and next line contains n integers representing the location of the scooters.\n26. Imagine you are given a board of cells, each containing a bubble of a specific colour (as\nshown below). Neighbouring cells of the bubble are defined as adjacent cells (on either the\nsame row or column as the given cell) which have a common side with the given cell. For\nexample, the neighbouring cells for each of the cells A, B and C are highlighted in corresponding\ncolour in the picture below.\nYour task is to perform a bubble explosion on the board. A bubble is defined by the following\nrules:\n• A bubble within any given cell is eligible to explode if it has the same colour as bubbles\nin at least 2 neighbouring cells.\n• All eligible bubbles and bubbles of the same colour in neighbouring cells are marked for\nexplosion.\n• All marked bubbles explode at the same time. Exploded bubbles are removed from the\nboard, resulting in empty cells.\n• After all exploded bubbles are removed, remaining bubbles in cells above the empty\ncells drop down to fill all empty cells.\nYou are given an initial board of cells bubbles – a multidimensional array of integers\nrepresenting cells containing bubbles of various colours. Return the board state after a bubble\nDesigned by :- CEC GEU & GEHU\nexplosion. The output should be a multidimensional array of integers with the same size as\nbubbles, but replacing all the empty cells (without bubbles) with 0.\nNOTE: You are not expected to provide the most optimal solution, but solution with the time\ncomplexity not worse than O(bubbles.length2. bubbles[0].length2) will fit within the execution\ntime limit.\nFor Example\nBubbles = [ [3, 1, 2, 1],\n[1, 1, 1, 4],\n[3, 1, 2, 2],\n[3, 3, 3, 4]]\nThe output should be\n[[0, 0, 0, 0],\n[0, 0, 0, 1],\n[0, 0, 0, 4],\n[3, 0, 2, 4]]\nDesigned by :- CEC GEU & GEHU"
}